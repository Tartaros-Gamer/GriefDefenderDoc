(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{771:function(e,t,r){"use strict";r.r(t);var a=r(104),o=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("p",[e._v("⚠️ Before using GriefPrevention migrator, backup your data (including LuckPerms)."),r("br"),e._v("\nIt is recommended to test migration on a test server before applying to production to ensure everything works as expected."),r("br"),e._v("\n⚠️ All player data that contains accrued claim blocks and bonus claim blocks will be stored as meta in LuckPerms when migrator is finished."),r("br"),e._v("\n⚠️ Converting a GP SQL Database back to file storage can be done with the python script found "),r("a",{attrs:{href:"https://gist.github.com/ar00n/f1ac69dd52554e56f012c8d631bed5d7",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),r("OutboundLink")],1),e._v(", alter the database connection details in the script."),r("br"),e._v("\nAccrued claim blocks will use meta key "),r("code",[e._v("griefdefender.accrued-blocks")]),r("br"),e._v("\nBonus claim blocks will use meta key "),r("code",[e._v("griefdefender.bonus-blocks")]),r("br"),e._v("\nSee https://github.com/lucko/LuckPerms/wiki/Prefixes,-Suffixes-&-Meta#meta for more info")]),e._v(" "),r("h2",{attrs:{id:"bukkit"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#bukkit"}},[e._v("#")]),e._v(" Bukkit")]),e._v(" "),r("h3",{attrs:{id:"griefdefender-supports-a-complete-migration-from-griefprevention-bukkit-to-migrate-to-griefdefender-perform-the-following-steps"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#griefdefender-supports-a-complete-migration-from-griefprevention-bukkit-to-migrate-to-griefdefender-perform-the-following-steps"}},[e._v("#")]),e._v(" GriefDefender supports a complete migration from GriefPrevention Bukkit. To migrate to GriefDefender, perform the following steps")]),e._v(" "),r("ol",[r("li",[e._v("Add GriefDefender jar to plugins")]),e._v(" "),r("li",[e._v("Remove GriefPrevention jar from plugins")]),e._v(" "),r("li",[e._v("Start the server to generate GriefDefender configs.")]),e._v(" "),r("li",[e._v("Stop server")]),e._v(" "),r("li",[e._v("Edit global.conf under ./plugins/GriefDefender/")]),e._v(" "),r("li",[e._v("Locate section")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("# List of migrators that convert old or other protection data into the current GD claim data format.\n# Note: It is recommended to backup data before using.\nmigrator {\n    # Set to true to enable the classic migrator.\n    # Note: Migrates GP bukkit classic claim data and GPFlags data, if available, to current format.\n    # Note: It is recommended to backup data before using.\n    classic=false\n    # Set to true to enable the legacy playerdata file migrator.\n    # Note: Migrates legacy playerdata file format to permissions storage such as LuckPerms json or mysql storage.\n    # Note: Before turning this on, make sure you properly set 'context-storage-type' in the the playerdata section of this config.\n    # Note: It is HIGHLY recommended to backup your permissions database before running this migrator as all local playerdata files will be migrated to it.\n    # Note: Do NOT run this migrator on more than one server if multiple servers share the same permissions database.\n    playerdata=false\n    # Set to true to enable WorldGuard data migrator.\n    # Note: Only cuboid regions are supported.\n    # Note: It is recommended to backup data before using.\n    worldguard=false\n}\n")])])]),r("ol",{attrs:{start:"7"}},[r("li",[e._v("Set classic to "),r("code",[e._v("true")])]),e._v(" "),r("li",[e._v("Start Server"),r("br"),e._v("\nIf done properly, GriefDefender will migrate all data from "),r("code",[e._v("plugins/GriefPreventionData")]),e._v(" to "),r("code",[e._v("plugins/GriefDefender")]),e._v("."),r("br"),e._v("\nMigration output should appear in console as it is migrating.")]),e._v(" "),r("li",[e._v("Disable the migrator in "),r("code",[e._v("global.conf")])])]),e._v(" "),r("h2",{attrs:{id:"sponge"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#sponge"}},[e._v("#")]),e._v(" Sponge")]),e._v(" "),r("p",[e._v("⚠️ The migrator will not copy the "),r("code",[e._v("global.conf")]),e._v(" as there have been many changes to it in GriefDefender. You will have to manually copy the settings you want from GP's "),r("code",[e._v("global.conf")]),e._v(" to GD.")]),e._v(" "),r("ol",[r("li",[e._v("Add GriefDefender jar to mods or plugins folder")]),e._v(" "),r("li",[e._v("Remove GriefPrevention jar from mods/plugins folder")]),e._v(" "),r("li",[e._v("Start the server to generate GriefDefender configs.")]),e._v(" "),r("li",[e._v("Stop server")]),e._v(" "),r("li",[e._v("Edit global.conf under ./plugins/GriefDefender/")]),e._v(" "),r("li",[e._v("Locate section")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("# List of migrators that convert old or other protection data into the current GD claim data format.\n# Note: It is recommended to backup data before using.\nmigrator {\n    # Set to true to enable the griefprevention bukkit migrator.\n    # Note: Migrates GP bukkit classic claim data and GPFlags data, if available, to current format.\n    # Note: It is recommended to backup data before using.\n    griefprevention-bukkit=false\n    # Set to true to enable the griefprevention sponge migrator.\n    # Note: Migrates GP sponge claim data to current format.\n    # Note: It is recommended to backup data before using.\n    griefprevention-sponge=false\n    # Set to true to enable the legacy playerdata file migrator.\n    # Note: Migrates legacy playerdata file format to permissions storage such as LuckPerms json or mysql storage.\n    # Note: Before turning this on, make sure you properly set 'context-storage-type' in the the playerdata section of this config.\n    # Note: It is HIGHLY recommended to backup your permissions database before running this migrator as all local playerdata files will be migrated to it.\n    # Note: Do NOT run this migrator on more than one server if multiple servers share the same permissions database.\n    playerdata=false\n    # Set to true to enable RedProtect data migrator.\n    # Note: All RedProtect data will be converted into basic claim data.\n    red-protect=false\n    # Set to true to enable WorldGuard data migrator.\n    # Note: Only cuboid regions are supported.\n    # Note: It is recommended to backup data before using.\n    worldguard=false\n}\n")])])]),r("ol",{attrs:{start:"7"}},[r("li",[e._v("Set "),r("code",[e._v("griefprevention-sponge")]),e._v(" to "),r("code",[e._v("true")])]),e._v(" "),r("li",[e._v("Set 'playerdata' to true."),r("br"),e._v("\nNote: Make sure to read the comment carefully as there are things to check before turning on the migrator.")]),e._v(" "),r("li",[e._v("Locate section")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("playerdata {\n    # Determines which claim block system to use for claims. (Default: AREA)\n    # If set to VOLUME, claim blocks will use the chunk count system to balance 3d claiming.\n    # If set to AREA, the standard 2d block count system will be used.\n    claim-block-system=AREA\n    # The context type used when storing playerdata within a permissions database.\n    # Available types are : global, server, world. (Default: global)\n    # Global will store data globally shared by all servers.\n    # Server will store data per server. Note: This requires servername to be properly set in permissions config.\n    # World will store data per world.\n    context-storage-type=global\n    ...\n}\n")])])]),r("ol",{attrs:{start:"10"}},[r("li",[r("code",[e._v("context-storage-type")]),e._v(" needs to be set to "),r("code",[e._v("global")]),e._v(", "),r("code",[e._v("server")]),e._v(", or "),r("code",[e._v("world")]),e._v(". Read comment for more information.")]),e._v(" "),r("li",[e._v("Start server"),r("br"),e._v("\nIf done properly, GriefDefender will migrate all data from "),r("code",[e._v("plugins/GriefPreventionData")]),e._v(" to "),r("code",[e._v("plugins/GriefDefender")]),e._v(" including permission data."),r("br"),e._v("\nMigration output should appear in console as it is migrating.")]),e._v(" "),r("li",[e._v("Disable the migrator in "),r("code",[e._v("global.conf")])])])])}),[],!1,null,null,null);t.default=o.exports}}]);